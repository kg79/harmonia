<!DOCTYPE html>
<html>
<head>
<link href="https://fonts.googleapis.com/css?family=Dancing+Script&display=swap" rel="stylesheet">
<style>
    #heading { 
        grid-area: header;
        height:5em;
        display:flex;
        justify-content:space-around;
    } #ratio {
        width:fit-content;
        background:white;
        text-align:center;
    }
    #dragonDrop {
        width:5em;
        margin:auto;
    }
    #ascendingOutside { 
        grid-area: topMenu; 
    }
    #descendingOutside { 
        grid-area: bottomMenu; 
    }
    #interface { 
	grid-area: main; 
	display:grid;
	grid-template-columns: auto auto auto auto auto auto auto auto auto auto;
	background:black;
	width:fit-content;
	height:100%;
	width:auto;
    }
    #footer { 
        grid-area: footer; 
        height:5em;
        display:flex;
        justify-content:flex-start;
    }
    body {
        margin:0;
        background:black;
    }
    #grid-container {
	display: grid;
	grid-template-areas:
	'topMenu header header header header header'
	'topMenu main main main main main'
	'topMenu main main main main main'
	'topMenu main main main main main'
	'bottomMenu main main main main main'
	'bottomMenu main main main main main'
	'bottomMenu main main main main main'
	'bottomMenu footer footer footer footer footer';
	grid-gap: 10px;
	background-color: #2196F3;
    height:89vh;
    }

    #grid-container > #interface {
	background-color: black ;
    } #grid-container > div {
	background-color: white;
	text-align: center;
    } 
    
    h1 {
	margin:0;
    margin:auto;
	display:flex;
	justify-content:center;
	align-items:center;
    font-family: 'Dancing Script', cursive;
    font-size:220%;
    color:#2196F3;
    text-shadow:0px -2px white;
    height:10vh;
    width:fit-content;
    background:black;
    } 
    #top {
        background:black;
    }
    article {
	width:5em;
    }
    .tiles {
	width:fit-content;
	display:flex;
	flex-direction:column;
	justify-content:space-around;
    margin:auto;
	height:7em;
    border:solid black .1em;
    } .keyNames {
	background:white;
    } .fractions {
	background:#2196F3;
    } .decimals {
	background:rgb(33, 243, 198);
    } .values {
	background:rgb(33, 243, 79);
    } #ascendingInside {
	display:grid;
	grid-template-columns: auto auto;
	overflow:scroll;
    height:35vh;
    } #descendingInside {
	display:grid;
	grid-template-columns: auto auto;
	overflow:scroll;
    height:35vh;
    } #range {
	width:4em;
    } .harmonics {
	border:solid .05em black;
    } #interface {

    } #otherRange {
        width:4em;
    } .descendingHarmonics {
        border:solid .05em black;
    } .shifter {
        background:white;
        width:fit-content;
    } #stdPitch {
        width:5em;
    } #volumeBox {
        border:solid 2px black;
    } #waveType {
        border:solid 2px black;
    } .effects {
        margin-left:4em;
        /*border:solid black .08em;*/
        display:flex;
        flex-direction:column;
        justify-content:center;
    } .controls {
        width:fit-content;
        display:flex;
        flex-direction:column;
        justify-content:space-evenly;
        align-items:center;
    } .shifter {
        width:5em;
    } article {
        height:2em;
    } #message {
        visibility:hidden;
        font-size:90%;
        position:absolute;
    }
</style>
    </head>
    <body>
    <div id='top'>
        <h1>
            zenofone
        </h1>
    </div>

    <div id="grid-container">
        <div id="heading">

            <section class='controls'>
                <label>standard pitch: </label>
                <input type='number' id='stdPitch' value='432'>
            </section>

            <section class='controls'>
                <label>selected ratio</label>
                <section id='dragonDrop'>
                </section>
            </section>

            <section class='controls'>
                    <label>left shift at:</label>
                    <input id='leftStartAt' class='shifter'>
                    <button id='leftShift' onclick='leftShift()'>shift</button>
            </section>

            <section class='controls'>
                    <label>right shift at:</label>
                    <input id='startAt' class='shifter'>
                    <button id='shift' onclick='shift()'>shift</button>
            </section>

        </div>
    <div id="ascendingOutside">
        range: <input type='number' id='range' value='120'><br/><button onclick='harmonicsGenerator()'>generate</button>
        <section id='ascendingInside'></section>    
    </div>

  <div id="descendingOutside">
        range: <input type='number' id='otherRange' value='120'><br/><button onclick='descendingGenerator()'>generate</button>
        <section id='descendingInside'></section>
    </div>
  <div id='interface'>

    <% for (let i = 0; i < 30; i++) { %>
      <section class='tiles' data-index='<%=i%>'>
          <article class='keyNames'>&nbsp;</article>
          <article class='fractions'>&nbsp;</article>
          <article class='decimals'>&nbsp;</article>
          <article class='values'>&nbsp;</article>
      </section>
      <% } %>
  </div>  

    <div id="footer">
            <section class='effects'>
                    volume :<br/>
                    <input value='2' id='volume' type='range' min='0' max='10' step='1'>
            </section>

            <section class='effects'>
                wave type:<br/>
                <select id='wave'>
                        <option value="sine">sine</option>
                        <option value="square">square</option>
                        <option value="triangle">triangle</option>
                        <option value="sawtooth">sawtooth</option>
                </select>
            </section>

            <section class='effects' id='info'>
                <u id='instructions'>instructions</u>
                <section id='message'>
On the left hand side, choose how many harmonics to generate. Click on the desired harmonic, and then on the colored tile 
that corresponds to that key on the keyboard. You can also make a hole in the line up by typing in the name of the key, 
and clicking the shift button.
                </section>
            </section>
    </div>
    </div>

</body>
<script>

let atx;
window.onclick = () => atx = new AudioContext();

const keyNames = document.getElementsByClassName('keyNames');
const decimals = document.getElementsByClassName('decimals');
const fractions = document.getElementsByClassName('fractions');
const values = document.getElementsByClassName('values');
const stdPitch = document.getElementById('stdPitch');
const volume = document.getElementById('volume');

const keyCodes = [
    {'symb':'Q', 'numb':81},
    {'symb':'W', 'numb':87},
    {'symb':'E', 'numb':69},
    {'symb':'R', 'numb':82},
    {'symb':'T', 'numb':84},
    {'symb':'Y', 'numb':89},
    {'symb':'U', 'numb':85},
    {'symb':'I', 'numb':73},
    {'symb':'O', 'numb':79},
    {'symb':'P', 'numb':80},
    {'symb':'A', 'numb':65},
    {'symb':'S', 'numb':83},
    {'symb':'D', 'numb':68},
    {'symb':'F', 'numb':70},
    {'symb':'G', 'numb':71},
    {'symb':'H', 'numb':72},
    {'symb':'J', 'numb':74},
    {'symb':'K', 'numb':75},
    {'symb':'L', 'numb':76},
    {'symb':';', 'numb':186},
    {'symb':'Z', 'numb':90},
    {'symb':'X', 'numb':88},
    {'symb':'C', 'numb':67},
    {'symb':'V', 'numb':86},
    {'symb':'B', 'numb':66},
    {'symb':'N', 'numb':78},
    {'symb':'M', 'numb':77},
    {'symb':',', 'numb':188},
    {'symb':'.', 'numb':190},
    {'symb':'/', 'numb':191},
];


const tiles = document.getElementsByClassName('tiles');

class Music {
    constructor(name, volume, index) {
	this.name = name;
	this.volume = volume;
	this.index = index;
	this.playing = false;
    }
    on() {
	if (this.playing === false) {
	    this.name = atx.createOscillator();
	    this.volume = atx.createGain();
	    this.name.frequency.value = stdPitch.value* eval(fractions[this.index].textContent);
        this.volume.gain.value = volume.value/10;
        this.name.type = wave.value;
	    this.name.connect(this.volume).connect(atx.destination);
	    this.name.start(0);
	    this.playing = true;
        tiles[this.index].style.border = 'solid red .1em';
	}
    }
    off() {
	this.name.stop(0);
	this.playing = false;
	tiles[this.index].style.border = 'solid black .1em';
    }
}

Music.prototype.sampleOn = function(ratio){
        this.name = atx.createOscillator();
	    this.volume = atx.createGain();
	    this.name.frequency.value = stdPitch.value* eval(ratio);
        this.volume.gain.value = volume.value/10;
        this.name.type = wave.value;
	    this.name.connect(this.volume).connect(atx.destination);
	    this.name.start(0);
}
Music.prototype.sampleOff = function() {
    this.name.stop(0);
}

let name0, name1, name2, name3, name4, name5, name6, name7, name8, name9, name10, name11, name12, name13, name14, name15, name16, name17, name18, name19, name20, name21, name22, name23, name24, name25, name26, name27, name28, name29, name30;
let volume0, volume1, volume2, volume3, volume4, volume5, volume6, volume7, volume8, volume9, volume10, volume11, volume12, volume13, volume14, volume15, volume16, volume17, volume18, volume19, volume20, volume21, volume22, volume23, volume24, volume25, volume26, volume27, volume28, volume29, volume30;


let notes = [
    new Music(name0, volume0, 0),
    new Music(name1, volume1, 1),
    new Music(name2, volume2, 2),
    new Music(name3, volume3, 3),
    new Music(name4, volume4, 4),
    new Music(name5, volume5, 5),
    new Music(name6, volume6, 6),
    new Music(name7, volume7, 7),
    new Music(name8, volume8, 8),
    new Music(name9, volume9, 9),
    new Music(name10, volume10, 10),
    new Music(name11, volume11, 11),
    new Music(name12, volume12, 12),
    new Music(name13, volume13, 13),
    new Music(name14, volume14, 14),
    new Music(name15, volume15, 15),
    new Music(name16, volume16, 16),
    new Music(name17, volume17, 17),
    new Music(name18, volume18, 18),
    new Music(name19, volume19, 19),
    new Music(name20, volume20, 20),
    new Music(name21, volume21, 21),
    new Music(name22, volume22, 22),
    new Music(name23, volume23, 23),
    new Music(name24, volume24, 24),
    new Music(name25, volume25, 25),
    new Music(name26, volume26, 26),
    new Music(name27, volume27, 27),
    new Music(name28, volume28, 28),
    new Music(name29, volume29, 29),
    new Music(name30, volume30, 30),
];

window.addEventListener('keydown', e => {
    switch (e.keyCode) {
    case keyCodes[0].numb:
	notes[0].on();
	break;
    case keyCodes[1].numb:
	notes[1].on();
	break;
    case keyCodes[2].numb:
	notes[2].on();
	break;
    case keyCodes[3].numb:
	notes[3].on();
	break;
    case keyCodes[4].numb:
	notes[4].on();
	break;
    case keyCodes[5].numb:
	notes[5].on();
	break;
    case keyCodes[6].numb:
	notes[6].on();
	break;
    case keyCodes[7].numb:
	notes[7].on();
	break;
    case keyCodes[8].numb:
	notes[8].on();
	break;
    case keyCodes[9].numb:
	notes[9].on();
	break;
    case keyCodes[10].numb:
	notes[10].on();
	break;
    case keyCodes[11].numb:
	notes[11].on();
	break;
    case keyCodes[12].numb:
	notes[12].on();
	break;
    case keyCodes[13].numb:
	notes[13].on();
	break;
    case keyCodes[14].numb:
	notes[14].on();
	break;
    case keyCodes[15].numb:
	notes[15].on();
	break;
    case keyCodes[16].numb:
	notes[16].on();
	break;
    case keyCodes[17].numb:
	notes[17].on();
	break;
    case keyCodes[18].numb:
	notes[18].on();
	break;
    case keyCodes[19].numb:
	notes[19].on();
	break;
    case keyCodes[20].numb:
	notes[20].on();
	break;
    case keyCodes[21].numb:
	notes[21].on();
	break;
    case keyCodes[22].numb:
	notes[22].on();
	break;
    case keyCodes[23].numb:
	notes[23].on();
	break;
    case keyCodes[24].numb:
	notes[24].on();
	break;
    case keyCodes[25].numb:
	notes[25].on();
	break;
    case keyCodes[26].numb:
	notes[26].on();
	break;
    case keyCodes[27].numb:
	notes[27].on();
	break;
    case keyCodes[28].numb:
	notes[28].on();
	break;
    case keyCodes[29].numb:
	notes[29].on();
	break;
    }
});

window.addEventListener('keyup', e => {
    switch (e.keyCode) {
    case keyCodes[0].numb:
	notes[0].off();
	break;
    case keyCodes[1].numb:
	notes[1].off();
	break;
    case keyCodes[2].numb:
	notes[2].off();
	break;
    case keyCodes[3].numb:
	notes[3].off();
	break;
    case keyCodes[4].numb:
	notes[4].off();
	break;
    case keyCodes[5].numb:
	notes[5].off();
	break;
    case keyCodes[6].numb:
	notes[6].off();
	break;
    case keyCodes[7].numb:
	notes[7].off();
	break;
    case keyCodes[8].numb:
	notes[8].off();
	break;
    case keyCodes[9].numb:
	notes[9].off();
	break;
    case keyCodes[10].numb:
	notes[10].off();
	break;
    case keyCodes[11].numb:
	notes[11].off();
	break;
    case keyCodes[12].numb:
	notes[12].off();
	break;
    case keyCodes[13].numb:
	notes[13].off();
	break;
    case keyCodes[14].numb:
	notes[14].off();
	break;
    case keyCodes[15].numb:
	notes[15].off();
	break;
    case keyCodes[16].numb:
	notes[16].off();
	break;
    case keyCodes[17].numb:
	notes[17].off();
	break;
    case keyCodes[18].numb:
	notes[18].off();
	break;
    case keyCodes[19].numb:
	notes[19].off();
	break;
    case keyCodes[20].numb:
	notes[20].off();
	break;
    case keyCodes[21].numb:
	notes[21].off();
	break;
    case keyCodes[22].numb:
	notes[22].off();
	break;
    case keyCodes[23].numb:
	notes[23].off();
	break;
    case keyCodes[24].numb:
	notes[24].off();
	break;
    case keyCodes[25].numb:
	notes[25].off();
	break;
    case keyCodes[26].numb:
	notes[26].off();
	break;
    case keyCodes[27].numb:
	notes[27].off();
	break;
    case keyCodes[28].numb:
	notes[28].off();
	break;
    case keyCodes[29].numb:
	notes[29].off();
	break;
    }
});

document.addEventListener('DOMContentLoaded', () => {
    for (let i = 0; i < keyCodes.length; i++) {
	    keyNames[i].innerText = keyCodes[i].symb
    }
});

let ascendingPool = [];
const ascendingInside = document.getElementById('ascendingInside');
const range = document.getElementById('range');
const harmonics = document.getElementsByClassName('harmonics');

//ascending harmonics
function harmonicsGenerator() {
    //generate harmonics
    let numerator = 2, denominator = 1;
    ascendingPool.push({'fractions':'1/1','decimals':1/1});
    for (let i = 0; i < range.value; i++) {
	if (numerator > denominator) {
            ascendingPool.push({'fractions':`${numerator}/${denominator}`,'decimals':numerator/denominator});
	    denominator++;
	}
	if (denominator === numerator) {
	    denominator = 1;
	    numerator++;
	}
    }
    // //bubble sort
    let sideA, sideB;
    for (let i = 0; i < ascendingPool.length; i++) {
	for (let j = 1; j < ascendingPool.length; j++) {
	    if (ascendingPool[j].decimals < ascendingPool[j-1].decimals) {
		sideA = ascendingPool[j].decimals;
                sideB = ascendingPool[j].fractions;
		ascendingPool[j].decimals = ascendingPool[j-1].decimals;
                ascendingPool[j].fractions = ascendingPool[j-1].fractions;
		ascendingPool[j-1].decimals = sideA;
                ascendingPool[j-1].fractions = sideB;
	    }
	}
    }
    //trim
    for (let i = 1; i < ascendingPool.length; i++) {
        if (ascendingPool[i].decimals === ascendingPool[i-1].decimals) {
            while (ascendingPool[i].decimals === ascendingPool[i-1].decimals) {
                ascendingPool.splice(i, 1);
            }
        }
    }
    //remove existing
    while (harmonics.length) {
        for (let i = 0; i < harmonics.length; i++) {
            harmonics[i].parentElement.removeChild(harmonics[i])
        }
    }
    
    //create elements and render
    let decimalNode, decimalText, fractionNode, fractionText;
    
    for (let i = 0; i < range.value; i++) {
	
        decimalNode = document.createElement(`section`);
        decimalNode.setAttribute('class', 'harmonics')
        decimalText = document.createTextNode(`${ascendingPool[i].decimals.toPrecision(5).replace(/0+$/, '')}`);
        decimalNode.appendChild(decimalText);
        ascendingInside.appendChild(decimalNode);
	
	    fractionNode = document.createElement(`section`);
        fractionNode.setAttribute('class', 'harmonics')
        fractionText = document.createTextNode(`${ascendingPool[i].fractions}`);
        fractionNode.appendChild(fractionText);
        ascendingInside.appendChild(fractionNode);
    }
}

const dragonDrop = document.getElementById('dragonDrop');
const interface = document.getElementById('interface');


ascendingInside.onclick = e => dragonDrop.innerText = e.target.textContent;

descendingInside.onclick = e => dragonDrop.innerText = e.target.textContent;

interface.onclick = e => {
   let dataIndex = parseInt(e.target.parentNode.getAttribute('data-index'));
   
    if (e.srcElement.localName === 'article') {
    fractions[dataIndex].innerText = dragonDrop.textContent;
    decimals[dataIndex].innerText = eval(dragonDrop.textContent).toPrecision(5).replace(/0+$/, '');
	values[dataIndex].innerText = stdPitch.value* eval(dragonDrop.textContent).toPrecision(5);
    } 
}
const descendingHarmonics = document.getElementsByClassName('descendingHarmonics');
let descendingPool = [];
function descendingGenerator() {
        //generate descendingHarmonics
        let numerator = 1, denominator = 2;
    descendingPool.push({'fractions':'1/1','decimals':1/1});
    for (let i = 0; i < otherRange.value; i++) {
	if (numerator < denominator) {
        descendingPool.push({'fractions':`${numerator}/${denominator}`,'decimals':numerator/denominator});
	    numerator++;
	}
	if (denominator === numerator) {
	    numerator = 1;
	    denominator++;
	}
    }
    // // //bubble sort
    let sideA, sideB;
    for (let i = 0; i < descendingPool.length; i++) {
	for (let j = 1; j < descendingPool.length; j++) {
	    if (descendingPool[j].decimals > descendingPool[j-1].decimals) {
		sideA = descendingPool[j].decimals;
                sideB = descendingPool[j].fractions;
		descendingPool[j].decimals = descendingPool[j-1].decimals;
                descendingPool[j].fractions = descendingPool[j-1].fractions;
		descendingPool[j-1].decimals = sideA;
                descendingPool[j-1].fractions = sideB;
	    }
	}
    }
    // //trim
    for (let i = 1; i < descendingPool.length; i++) {
        if (descendingPool[i].decimals === descendingPool[i-1].decimals) {
            while (descendingPool[i].decimals === descendingPool[i-1].decimals) {
                descendingPool.splice(i, 1);
            }
        }
    }

    while (descendingHarmonics.length) {
        for (let i = 0; i < descendingHarmonics.length; i++) {
            descendingHarmonics[i].parentElement.removeChild(descendingHarmonics[i])
        }
    }
    
    
    let decimalNode, decimalText, fractionNode, fractionText;
    
    
    for (let i = 0; i < otherRange.value; i++) {
	
        decimalNode = document.createElement(`section`);
        decimalNode.setAttribute('class', 'descendingHarmonics')
        decimalText = document.createTextNode(`${descendingPool[i].decimals.toPrecision(5).replace(/0+$/, '')}`);
        decimalNode.appendChild(decimalText);
        descendingInside.appendChild(decimalNode);
	
	    fractionNode = document.createElement(`section`);
        fractionNode.setAttribute('class', 'descendingHarmonics')
        fractionText = document.createTextNode(`${descendingPool[i].fractions}`);
        fractionNode.appendChild(fractionText);
        descendingInside.appendChild(fractionNode);
    }
    
}

const startAt = document.getElementById('startAt');
//right shift
function shift() {

    let startingPoint;
    let array = [];
    for (let i = 0; i < keyCodes.length; i++) {
        if (keyCodes[i].symb == startAt.value || keyCodes[i].symb.toLowerCase() == startAt.value) {
            startingPoint = i;
        }
    }

    for (let i = startingPoint; i < 30 - startingPoint; i++) {
        if (typeof eval(fractions[i].textContent) == 'number') {
            array.push(fractions[i].textContent);
        }
    }

    fractions[startingPoint].textContent = `0/0`;
    decimals[startingPoint].textContent = '0.0';
    values[startingPoint].textContent = '0';


let count = 0;
    for (let i = startingPoint+1; i <= array.length+startingPoint; i++) {
        fractions[i].innerText = array[count];
        decimals[i].innerText = eval(array[count]);
        values[i].innerText = stdPitch.value* eval(array[count]);
        count++;
    }
}


const leftStartAt = document.getElementById('leftStartAt');

function leftShift() {
    

    let startingPoint;

    for (let i = 0; i < keyCodes.length; i++) {
        if (keyCodes[i].symb.toLowerCase() == leftStartAt.value.toLowerCase()) {
            startingPoint = i;
        }
    }

    let leftSide = [];

    for (let i = startingPoint; i >= 0; i--) {
            leftSide.push(fractions[i].textContent)
    }


    fractions[startingPoint].textContent = `0/0`;
    decimals[startingPoint].textContent = '0.0';
    values[startingPoint].textContent = '0';


    let count = 0;
    for (let i = startingPoint-1; i >= 0; i--) {
        fractions[i].innerText = leftSide[count];
        decimals[i].innerText = eval(leftSide[count]);
        values[i].innerText = stdPitch.value* eval(leftSide[count]);
        count++;
    }

}

stdPitch.addEventListener('change', () => {
    for (let i = 0; i < fractions.length; i++) {
        if (typeof eval(fractions[i].textContent) == 'number') {
            values[i].innerText = (stdPitch.value * eval(fractions[i].textContent)).toPrecision(6)
        }

    }
});

ascendingInside.addEventListener('mouseover', e => {
    notes[30].sampleOn(e.target.textContent)
})
ascendingInside.addEventListener('mouseout', () => {
    notes[30].sampleOff()
})
descendingInside.addEventListener('mouseover', e => {
    notes[30].sampleOn(e.target.textContent);
})
descendingInside.addEventListener('mouseout', () => {
    notes[30].sampleOff()
})

const message = document.getElementById('message');
const info = document.getElementById('info');
const instructions = document.getElementById('instructions');

info.onmouseover = () => {
    message.style.visibility = 'visible'
    instructions.style.visibility = 'hidden'
}
info.onmouseout = () => {
    message.style.visibility = 'hidden';
    instructions.style.visibility = 'visible'
}


</script>
</html>
